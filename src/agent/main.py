import os
import sys
import json
import time
import logging
import argparse
import threading
import signal
from pathlib import Path
from dotenv import load_dotenv

from . import find_and_load_env, find_config_file, load_config, check_required_env_vars
from event_monitor import EventMonitor
from event_handler import EventHandler
from telegram_notifier import TelegramNotifier
import schedule

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging(log_dir):
    log_dir = Path(log_dir)
    log_dir.mkdir(parents=True, exist_ok=True)
    
    log_file = log_dir / 'agent.log'
    
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
def send_daily_report(event_handler, telegram_notifier):
    logger = logging.getLogger('DailyReport')
    try:
        logger.info("Generating daily report")
        report = event_handler.get_daily_report()
        
        if 'status' in report:
            logger.warning(f"Failed to generate report: {report['status']}")
            telegram_notifier.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {report['status']}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF
        from fpdf import FPDF
        import tempfile
        
        date_str = report['date']
        
        # –°–æ–∑–¥–∞–µ–º PDF
        pdf = FPDF()
        pdf.add_page()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {date_str}", 0, 1, 'C')
        pdf.ln(10)
        
        # –°–≤–æ–¥–∫–∞
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, "–°–≤–æ–¥–∫–∞:", 0, 1)
        
        pdf.set_font('Arial', '', 12)
        pdf.cell(0, 8, f"–ó–∞–ø—É—Å–∫–æ–≤ —Å–∏—Å—Ç–µ–º—ã: {report['startup_count']}", 0, 1)
        pdf.cell(0, 8, f"–í—Ö–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É: {report['login_count']}", 0, 1)
        pdf.cell(0, 8, f"–ü–æ–≤—ã—à–µ–Ω–∏–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π: {report['privilege_count']}", 0, 1)
        pdf.cell(0, 8, f"–ò–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á: {report['task_count']}", 0, 1)
        pdf.cell(0, 8, f"–ò–∑–º–µ–Ω–µ–Ω–∏–π —Å–ª—É–∂–±: {report['service_count']}", 0, 1)
        pdf.cell(0, 8, f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {report['suspicious_process_count']}", 0, 1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        pdf_path = temp_file.name
        pdf.output(pdf_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
        telegram_notifier.send_document(pdf_path, f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {date_str}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(pdf_path)
        
        logger.info("Daily report sent successfully")
    except Exception as e:
        logger.error(f"Error sending daily report: {str(e)}")
        telegram_notifier.send_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞
class WindowsMonitorAgent:
    def __init__(self, config):
        if isinstance(config, (str, Path)):
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config_path = Path(config)
            self.config = load_config(self.config_path)
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            self.config_path = None
            self.config = config
            
        self.logger = logging.getLogger('Agent')
        self.stop_event = threading.Event()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.telegram = TelegramNotifier(self.config)
        self.event_handler = EventHandler(self.config, self.telegram)
        self.event_monitor = EventMonitor(self.config, self.event_handler)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –≤ Telegram-–∫–ª–∏–µ–Ω—Ç–µ
        self.telegram.event_handler = self.event_handler
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        if self.config['features'].get('daily_report', True):
            report_time = self.config.get('reporting', {}).get('report_time', '20:00')
            schedule.every().day.at(report_time).do(
                send_daily_report, self.event_handler, self.telegram
            )
    
    def start(self):
        self.logger.info("Starting Windows Monitor Agent")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.telegram.start()
        self.event_monitor.start()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        hostname = os.environ.get('COMPUTERNAME', 'Unknown')
        self.telegram.send_message(f"üöÄ –ê–≥–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω\n–•–æ—Å—Ç: {hostname}\n–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        self._run_loop()
    
    def stop(self):
        self.logger.info("Stopping Windows Monitor Agent")
        self.stop_event.set()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.event_monitor.stop()
        self.telegram.stop()
        
        self.logger.info("Agent stopped")
    
    def _run_loop(self):
        self.logger.info("Agent main loop started")
        
        try:
            while not self.stop_event.is_set():
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                schedule.run_pending()
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
                
                # –°–ø–∏–º —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                time.sleep(1)
        except Exception as e:
            self.logger.error(f"Error in main loop: {str(e)}")
        
        self.logger.info("Agent main loop stopped")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(sig, frame, agent):
    logging.info(f"Received signal {sig}, shutting down...")
    agent.stop()
    sys.exit(0)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    parser = argparse.ArgumentParser(description='Windows Monitor Agent')
    parser.add_argument('--config', default='config.json', help='Path to config file')
    parser.add_argument('--log-dir', default='./logs', help='Path to log directory')
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger = setup_logging(args.log_dir)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_path = find_and_load_env()
        if env_path:
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ {env_path}")
        else:
            logger.warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        config_path = Path(args.config)
        if not config_path.exists():
            config_path = find_config_file()
            
        if not config_path:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.config}")
            sys.exit(1)
        
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_path}")
        config = load_config(config_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        missing_vars = check_required_env_vars(config)
        if missing_vars:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = WindowsMonitorAgent(config)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, lambda sig, frame: signal_handler(sig, frame, agent))
        signal.signal(signal.SIGTERM, lambda sig, frame: signal_handler(sig, frame, agent))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent.start()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 