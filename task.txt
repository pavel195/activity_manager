Техническое задание для распределённого приложения мониторинга (аналог ELK с Telegram-уведомлениями)
1. Общая концепция
Система состоит из двух основных компонентов:

Агент (клиентская часть) – устанавливается на ПК пользователей под управлением Windows и осуществляет сбор событий о запуске указанных программ.
Сервер (централизованная часть) – принимает данные от агентов, сохраняет их в базе данных PostgreSQL и в Elasticsearch (как в составе ELK-стека) для последующего анализа, а также отправляет уведомления в Telegram через бота.
2. Функциональные требования
2.1. Агент (клиентская часть)
Мониторинг процессов:
Отслеживание запуска программ: Chrome, Yandex, Telegram, Проводник.
Сбор информации о событии: время события, имя пользователя, имя процесса.
Исключение системных процессов.
Передача данных:
Отправка данных о событиях на сервер через HTTP (REST API) или другой выбранный протокол.
Данные передаются в формате JSON.
Конфигурация:
Настраиваемый внешний конфигурационный файл для указания списка процессов, параметров подключения к серверу и интервалов опроса.
2.2. Сервер (централизованная часть)
Прием и обработка данных:
Прием данных от агентов через REST API (или иной протокол).
Аутентификация агентов (например, посредством API-ключей или токенов) и обеспечение безопасности передачи (HTTPS).
Сохранение данных:
Запись событий в базу данных PostgreSQL с таблицей, содержащей поля: id, timestamp, username, process_name, agent_id.
Индексация и хранение данных в Elasticsearch для реализации функционала, аналогичного ELK-стеку.
Логирование и визуализация:
Возможность интеграции с Kibana для визуализации и анализа данных, хранящихся в Elasticsearch.
Уведомления в Telegram:
Интеграция с Telegram-ботом для отправки уведомлений о событиях.
Формат уведомления: "[Время] Пользователь [Имя пользователя] запустил [Имя процесса]".
Логирование работы сервера:
Ведение логов работы (включая ошибки и сбои) в отдельном лог-файле для дальнейшего анализа.
3. Технические требования
3.1. Технологии и библиотеки
Язык программирования: Python.
Агент:
pywin32 или win32evtlog для мониторинга событий Windows.
psutil для отслеживания запущенных процессов.
Библиотека requests для отправки HTTP-запросов на сервер.
Сервер:
Фреймворк для REST API (например, Flask или FastAPI).
Библиотека для работы с PostgreSQL: sqlalchemy или psycopg2.
Клиент для Elasticsearch: elasticsearch или elastic-transport.
python-telegram-bot для отправки уведомлений в Telegram.
(При необходимости) дополнительная интеграция с Kibana для визуализации данных в Elasticsearch.
3.2. Архитектура и коммуникация
Агент-сервер:
Агенты на ПК пользователей собирают информацию о запуске процессов и передают данные в формате JSON на сервер.
Сервер принимает, обрабатывает и сохраняет данные в PostgreSQL и Elasticsearch.
После успешной записи события сервер инициирует отправку уведомления в Telegram.
Безопасность:
Использование протокола HTTPS для защиты данных при передаче.
Аутентификация агентов на сервере с использованием API-ключей или токенов.
3.3. Производительность и масштабируемость
Оптимизация работы агента для минимизации влияния на производительность ПК.
Асинхронная обработка запросов на сервере для обеспечения высокой пропускной способности и масштабируемости.
Возможность подключения нескольких агентов к единому серверу для централизованного мониторинга.
4. Дополнительные требования
Конфигурация и настройка:
Возможность изменять список отслеживаемых процессов, параметры подключения к серверу, настройки базы данных и Telegram-бота через внешний конфигурационный файл.
Мониторинг и логирование:
Ведение логов как на стороне агента, так и на сервере с детальной информацией об ошибках, сбоях и успешных операциях.
Интеграция с ELK-стеком:
Передача и хранение данных в Elasticsearch, что позволяет использовать инструменты визуализации (например, Kibana) для анализа событий.
Уведомления:
Реализация гибких фильтров уведомлений, позволяющих исключать системные процессы и настроить пороговые значения для отправки уведомлений.
5. Итоговая схема работы системы
Сбор данных: Агент на ПК пользователя отслеживает запуск указанных программ, собирает информацию (время, имя пользователя, имя процесса) и исключает системные процессы.
Передача данных: Собранные данные отправляются на сервер через защищённое соединение в формате JSON.
Обработка на сервере:
Сервер принимает данные, проверяет аутентичность источника и сохраняет информацию в PostgreSQL.
Данные индексируются и сохраняются в Elasticsearch для дальнейшего анализа и визуализации.
Сервер отправляет уведомление в Telegram, используя заранее настроенный Telegram-бот.
Анализ и визуализация: Пользователь может использовать Kibana или другие инструменты для визуализации данных из Elasticsearch, что обеспечивает возможность детального анализа событий.
